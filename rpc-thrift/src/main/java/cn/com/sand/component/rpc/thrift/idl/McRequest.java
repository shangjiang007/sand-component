/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.com.sand.component.rpc.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-18")
public class McRequest implements org.apache.thrift.TBase<McRequest, McRequest._Fields>, java.io.Serializable, Cloneable, Comparable<McRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("McRequest");

  private static final org.apache.thrift.protocol.TField FROM_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROUTE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("routeInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new McRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new McRequestTupleSchemeFactory());
  }

  public String fromAddress; // required
  public String routeInfo; // required
  public String traceId; // required
  public String msgType; // optional
  public String data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_ADDRESS((short)1, "fromAddress"),
    ROUTE_INFO((short)2, "routeInfo"),
    TRACE_ID((short)3, "traceId"),
    MSG_TYPE((short)4, "msgType"),
    DATA((short)5, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_ADDRESS
          return FROM_ADDRESS;
        case 2: // ROUTE_INFO
          return ROUTE_INFO;
        case 3: // TRACE_ID
          return TRACE_ID;
        case 4: // MSG_TYPE
          return MSG_TYPE;
        case 5: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MSG_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("fromAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE_INFO, new org.apache.thrift.meta_data.FieldMetaData("routeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(McRequest.class, metaDataMap);
  }

  public McRequest() {
    this.msgType = "01";

  }

  public McRequest(
    String fromAddress,
    String routeInfo,
    String traceId,
    String data)
  {
    this();
    this.fromAddress = fromAddress;
    this.routeInfo = routeInfo;
    this.traceId = traceId;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public McRequest(McRequest other) {
    if (other.isSetFromAddress()) {
      this.fromAddress = other.fromAddress;
    }
    if (other.isSetRouteInfo()) {
      this.routeInfo = other.routeInfo;
    }
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetMsgType()) {
      this.msgType = other.msgType;
    }
    if (other.isSetData()) {
      this.data = other.data;
    }
  }

  public McRequest deepCopy() {
    return new McRequest(this);
  }

  @Override
  public void clear() {
    this.fromAddress = null;
    this.routeInfo = null;
    this.traceId = null;
    this.msgType = "01";

    this.data = null;
  }

  public String getFromAddress() {
    return this.fromAddress;
  }

  public McRequest setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

  public void unsetFromAddress() {
    this.fromAddress = null;
  }

  /** Returns true if field fromAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetFromAddress() {
    return this.fromAddress != null;
  }

  public void setFromAddressIsSet(boolean value) {
    if (!value) {
      this.fromAddress = null;
    }
  }

  public String getRouteInfo() {
    return this.routeInfo;
  }

  public McRequest setRouteInfo(String routeInfo) {
    this.routeInfo = routeInfo;
    return this;
  }

  public void unsetRouteInfo() {
    this.routeInfo = null;
  }

  /** Returns true if field routeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteInfo() {
    return this.routeInfo != null;
  }

  public void setRouteInfoIsSet(boolean value) {
    if (!value) {
      this.routeInfo = null;
    }
  }

  public String getTraceId() {
    return this.traceId;
  }

  public McRequest setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getMsgType() {
    return this.msgType;
  }

  public McRequest setMsgType(String msgType) {
    this.msgType = msgType;
    return this;
  }

  public void unsetMsgType() {
    this.msgType = null;
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return this.msgType != null;
  }

  public void setMsgTypeIsSet(boolean value) {
    if (!value) {
      this.msgType = null;
    }
  }

  public String getData() {
    return this.data;
  }

  public McRequest setData(String data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_ADDRESS:
      if (value == null) {
        unsetFromAddress();
      } else {
        setFromAddress((String)value);
      }
      break;

    case ROUTE_INFO:
      if (value == null) {
        unsetRouteInfo();
      } else {
        setRouteInfo((String)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_ADDRESS:
      return getFromAddress();

    case ROUTE_INFO:
      return getRouteInfo();

    case TRACE_ID:
      return getTraceId();

    case MSG_TYPE:
      return getMsgType();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_ADDRESS:
      return isSetFromAddress();
    case ROUTE_INFO:
      return isSetRouteInfo();
    case TRACE_ID:
      return isSetTraceId();
    case MSG_TYPE:
      return isSetMsgType();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof McRequest)
      return this.equals((McRequest)that);
    return false;
  }

  public boolean equals(McRequest that) {
    if (that == null)
      return false;

    boolean this_present_fromAddress = true && this.isSetFromAddress();
    boolean that_present_fromAddress = true && that.isSetFromAddress();
    if (this_present_fromAddress || that_present_fromAddress) {
      if (!(this_present_fromAddress && that_present_fromAddress))
        return false;
      if (!this.fromAddress.equals(that.fromAddress))
        return false;
    }

    boolean this_present_routeInfo = true && this.isSetRouteInfo();
    boolean that_present_routeInfo = true && that.isSetRouteInfo();
    if (this_present_routeInfo || that_present_routeInfo) {
      if (!(this_present_routeInfo && that_present_routeInfo))
        return false;
      if (!this.routeInfo.equals(that.routeInfo))
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_msgType = true && this.isSetMsgType();
    boolean that_present_msgType = true && that.isSetMsgType();
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (!this.msgType.equals(that.msgType))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fromAddress = true && (isSetFromAddress());
    list.add(present_fromAddress);
    if (present_fromAddress)
      list.add(fromAddress);

    boolean present_routeInfo = true && (isSetRouteInfo());
    list.add(present_routeInfo);
    if (present_routeInfo)
      list.add(routeInfo);

    boolean present_traceId = true && (isSetTraceId());
    list.add(present_traceId);
    if (present_traceId)
      list.add(traceId);

    boolean present_msgType = true && (isSetMsgType());
    list.add(present_msgType);
    if (present_msgType)
      list.add(msgType);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    return list.hashCode();
  }

  @Override
  public int compareTo(McRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromAddress()).compareTo(other.isSetFromAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromAddress, other.fromAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteInfo()).compareTo(other.isSetRouteInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeInfo, other.routeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("McRequest(");
    boolean first = true;

    sb.append("fromAddress:");
    if (this.fromAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.fromAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("routeInfo:");
    if (this.routeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.routeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (isSetMsgType()) {
      if (!first) sb.append(", ");
      sb.append("msgType:");
      if (this.msgType == null) {
        sb.append("null");
      } else {
        sb.append(this.msgType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class McRequestStandardSchemeFactory implements SchemeFactory {
    public McRequestStandardScheme getScheme() {
      return new McRequestStandardScheme();
    }
  }

  private static class McRequestStandardScheme extends StandardScheme<McRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, McRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromAddress = iprot.readString();
              struct.setFromAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROUTE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeInfo = iprot.readString();
              struct.setRouteInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgType = iprot.readString();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, McRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromAddress != null) {
        oprot.writeFieldBegin(FROM_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.fromAddress);
        oprot.writeFieldEnd();
      }
      if (struct.routeInfo != null) {
        oprot.writeFieldBegin(ROUTE_INFO_FIELD_DESC);
        oprot.writeString(struct.routeInfo);
        oprot.writeFieldEnd();
      }
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.msgType != null) {
        if (struct.isSetMsgType()) {
          oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
          oprot.writeString(struct.msgType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeString(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class McRequestTupleSchemeFactory implements SchemeFactory {
    public McRequestTupleScheme getScheme() {
      return new McRequestTupleScheme();
    }
  }

  private static class McRequestTupleScheme extends TupleScheme<McRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, McRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFromAddress()) {
        optionals.set(0);
      }
      if (struct.isSetRouteInfo()) {
        optionals.set(1);
      }
      if (struct.isSetTraceId()) {
        optionals.set(2);
      }
      if (struct.isSetMsgType()) {
        optionals.set(3);
      }
      if (struct.isSetData()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFromAddress()) {
        oprot.writeString(struct.fromAddress);
      }
      if (struct.isSetRouteInfo()) {
        oprot.writeString(struct.routeInfo);
      }
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetMsgType()) {
        oprot.writeString(struct.msgType);
      }
      if (struct.isSetData()) {
        oprot.writeString(struct.data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, McRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.fromAddress = iprot.readString();
        struct.setFromAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.routeInfo = iprot.readString();
        struct.setRouteInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msgType = iprot.readString();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data = iprot.readString();
        struct.setDataIsSet(true);
      }
    }
  }

}

